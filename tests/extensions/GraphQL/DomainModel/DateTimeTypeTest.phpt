<?php declare(strict_types = 1);

namespace Adeira\Connector\Tests\GraphQL\DomainModel;

use Adeira\Connector\GraphQL\DomainModel\DateTimeType;
use GraphQL\Language\AST\StringValueNode;
use Tester\Assert;

require getenv('BOOTSTRAP');

/**
 * @testCase
 */
final class DateTimeTypeTest extends \Adeira\Connector\Tests\TestCase
{

	public function testProps()
	{
		$type = new DateTimeType;
		Assert::same(\DateTime::class, $type->name);
		Assert::same('The `DateTime` scalar type represents date/time format compatible with ISO 8601 format.', $type->description);
	}

	public function testSerializeImmutable()
	{
		Assert::same('2008-07-01T14:48:21+10:00', (new DateTimeType)->serialize(
			new \DateTimeImmutable('July 1st, 2008 14:48:21', new \DateTimeZone('Australia/Sydney'))
		));
	}

	public function testSerializeMutable()
	{
		Assert::same('2008-07-01T14:48:21+10:00', (new DateTimeType)->serialize(
			new \DateTime('July 1st, 2008 14:48:21', new \DateTimeZone('Australia/Sydney'))
		));
	}

	public function testSerializeException()
	{
		Assert::exception(function () {
			(new DateTimeType)->serialize('string');
		}, \UnexpectedValueException::class, 'Cannot represent value as DateTime: string');
	}

	/**
	 * Functions parseValue() and parseLiteral() should behave exactly the same!
	 */
	public function testParseValueAndLiteral()
	{
		Assert::equal(
			new \DateTimeImmutable($expected = '2008-07-01 14:48:21 +1000'),
			(new DateTimeType)->parseValue($actual = '2008-07-01T14:48:21+10:00') // generated by PHP (above)
		);
		Assert::equal(new \DateTimeImmutable($expected), (new DateTimeType)->parseLiteral(new StringValueNode(['value' => $actual])));

		Assert::equal(
			new \DateTimeImmutable($expected = '2005-08-15 15:52:01 +0000'),
			(new DateTimeType)->parseValue($actual = '2005-08-15T15:52:01+0000') // Zulu timezone (UTC+0)
		);
		Assert::equal(new \DateTimeImmutable($expected), (new DateTimeType)->parseLiteral(new StringValueNode(['value' => $actual])));

		Assert::equal(
			new \DateTimeImmutable($expected = '2017-02-22 07:49:38.251 Z'),
			(new DateTimeType)->parseValue($actual = '2017-02-22T07:49:38.251Z') // generated by Javascript: new Date().toISOString()
		);
		Assert::equal(new \DateTimeImmutable($expected), (new DateTimeType)->parseLiteral(new StringValueNode(['value' => $actual])));
	}

	/**
	 * Functions parseValue() and parseLiteral() should behave exactly the same!
	 */
	public function testPerseValueException()
	{
		$message = 'Not a valid ISO 8601 date format.';
		Assert::exception(function () {
			(new DateTimeType)->parseValue('2017-02-22T07:49:38'); // without timezone
		}, \UnexpectedValueException::class, $message);
		Assert::exception(function () {
			(new DateTimeType)->parseLiteral(new StringValueNode(['value' => '2017-02-22T07:49:38']));
		}, \UnexpectedValueException::class, $message);

		Assert::exception(function () {
			(new DateTimeType)->parseValue('Monday, 15-Aug-2005 15:52:01 UTC'); // DATE_COOKIE
		}, \UnexpectedValueException::class, $message);
		Assert::exception(function () {
			(new DateTimeType)->parseLiteral(new StringValueNode(['value' => 'Monday, 15-Aug-2005 15:52:01 UTC']));
		}, \UnexpectedValueException::class, $message);

		Assert::exception(function () {
			(new DateTimeType)->parseValue('Wed Feb 22 2017 09:44:12 GMT+0100 (CET)'); // generated by Javascript: Date()
		}, \UnexpectedValueException::class, $message);
		Assert::exception(function () {
			(new DateTimeType)->parseLiteral(new StringValueNode(['value' => 'Wed Feb 22 2017 09:44:12 GMT+0100 (CET)']));
		}, \UnexpectedValueException::class, $message);
	}

	public function testParseLiteralError()
	{
		Assert::exception(function () {
			(new DateTimeType)->parseLiteral(new \GraphQL\Language\AST\IntValueNode(['value' => '2008-07-01T14:48:21+10:00']));
		}, \GraphQL\Error\Error::class, 'Query error: Can only parse strings got: IntValue');
	}

}

(new DateTimeTypeTest)->run();
