# GraphQL queries are hierarchical and composed, describing a tree of information.
# While Scalar types describe the leaf values of these hierarchical queries, Objects describe the intermediate levels.

graphql:
	queries:
		allWeatherStations:
			arguments:
				first: Int
				after: String
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Query\AllWeatherStationsResolver
			next: WeatherStationsConnection

		weatherStation:
			arguments:
				id: ID!
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Query\WeatherStationResolver
			next: WeatherStation


	mutations:
		createWeatherStation:
			arguments:
				name: String!
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Mutation\CreateWeatherStationResolver
			next: WeatherStation

		createWeatherStationRecord:
			arguments:
				id: ID!
				quantities: PhysicalQuantitiesInput!
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Mutation\CreateWeatherStationRecordResolver
			next: WeatherStationRecord

		removeWeatherStation:
			arguments:
				stationId: ID!
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Mutation\RemoveWeatherStationResolver
			next: WeatherStation

		renameWeatherStation:
			arguments:
				stationId: ID!
				newName: String!
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Mutation\RenameWeatherStationResolver
			next: WeatherStation


	outputTypes:
		AggregatedWeatherStationRecord:
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Type\AggregatedWeatherStationRecordResolver
			fields:
				aggregatedDate: DateTime
				absolutePressure:
					arguments:
						pressureUnit: PressureUnit(default: PASCAL)
					next: Float
				relativePressure:
					arguments:
						pressureUnit: PressureUnit(default: PASCAL)
					next: Float
				indoorTemperature:
					arguments:
						temperatureUnit: TemperatureUnit(default: CELSIUS)
					next: Float
				outdoorTemperature:
					arguments:
						temperatureUnit: TemperatureUnit(default: CELSIUS)
					next: Float
				indoorHumidity:
					arguments:
						humidityUnit: HumidityUnit(default: PERCENTAGE)
					next: Float
				outdoorHumidity:
					arguments:
						humidityUnit: HumidityUnit(default: PERCENTAGE)
					next: Float
				windSpeed:
					arguments:
						windSpeedUnit: WindSpeedUnit(default: KMH)
					next: Float
				windAzimuth: Float
				windGust:
					arguments:
						windSpeedUnit: WindSpeedUnit(default: KMH)
					next: Float

		WeatherStation:
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Type\WeatherStationResolver
			fields:
				id: ID!
				name: String!
				allRecords:
					arguments:
						first: Int!
						aggregation: RecordsAggregation(default: hour)
						untilDate: DateTime
					next: WeatherStationRecordsConnection

		WeatherStationRecord:
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Type\WeatherStationRecordResolver
			fields:
				id: ID!
				creationDate: DateTime!

		WeatherStationRecordsConnection:
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Type\WeatherStationRecordsConnectionResolver
			fields:
				totalCount: Int!
				returnedCount: Int!
				records: [AggregatedWeatherStationRecord]

		WeatherStationsConnection:
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Type\WeatherStationsConnectionResolver
			fields:
				edges: [WeatherStationEdge]
				totalCount: Int!
				weatherStations: [WeatherStation]

		WeatherStationEdge:
			resolver: Adeira\Connector\Devices\Infrastructure\Delivery\API\GraphQL\WeatherStation\Type\WeatherStationsEdgeResolver
			fields:
				cursor: String!
				node: WeatherStation


	inputTypes:
		PhysicalQuantitiesInput:
			absolutePressure: Float
			relativePressure: Float
			pressureUnit: PressureUnit(default: PASCAL)
			indoorTemperature: Float
			outdoorTemperature: Float
			temperatureUnit: TemperatureUnit(default: CELSIUS)
			indoorHumidity: Float
			outdoorHumidity: Float
			humidityUnit: HumidityUnit(default: PERCENTAGE)
			windSpeed: Float
			windAzimuth: Float
			windGust: Float
			windSpeedUnit: WindSpeedUnit(default: KMH)


	enums:
		RecordsAggregation:
			hour: hour
			day: day
			week: week
			month: month

		PressureUnit:
			ATM: Adeira\Connector\PhysicalUnits\DomainModel\Pressure\Units\Atm
			BAR: Adeira\Connector\PhysicalUnits\DomainModel\Pressure\Units\Bar
			PASCAL: Adeira\Connector\PhysicalUnits\DomainModel\Pressure\Units\Pascal
			TORR: Adeira\Connector\PhysicalUnits\DomainModel\Pressure\Units\Torr

		TemperatureUnit:
			CELSIUS: Adeira\Connector\PhysicalUnits\DomainModel\Temperature\Units\Celsius
			FAHRENHEIT: Adeira\Connector\PhysicalUnits\DomainModel\Temperature\Units\Fahrenheit
			KELVIN: Adeira\Connector\PhysicalUnits\DomainModel\Temperature\Units\Kelvin

		HumidityUnit:
			PERCENTAGE: Adeira\Connector\PhysicalUnits\DomainModel\Humidity\Units\Percentage

		WindSpeedUnit:
			KMH: Adeira\Connector\PhysicalUnits\DomainModel\Speed\Units\Kmh
			MPH: Adeira\Connector\PhysicalUnits\DomainModel\Speed\Units\Mph
			MS: Adeira\Connector\PhysicalUnits\DomainModel\Speed\Units\Ms
